window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "dsc", "modulename": "dsc", "kind": "module", "doc": "<p>This package consist of modules that are mainly used for the lecture notes of\nthe Data Sience Challenge.</p>\n"}, {"fullname": "dsc.introduction", "modulename": "dsc.introduction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dsc.introduction.data", "modulename": "dsc.introduction.data", "kind": "module", "doc": "<p>Data which is used in /lecture_notes/0_introduction/1_data_and_projects.ipynb</p>\n"}, {"fullname": "dsc.introduction.data.example_pin", "modulename": "dsc.introduction.data", "qualname": "example_pin", "kind": "variable", "doc": "<p></p>\n", "default_value": "   member_id channel               start                 end\n0          1   No-TV 2020-01-01 03:00:00 2020-01-01 14:11:59\n1          1     ARD 2020-01-01 14:12:00 2020-01-01 17:59:59\n2          1      P7 2020-01-01 18:00:00 2020-01-01 20:00:00\n3          1     RTL 2020-01-01 20:00:01 2020-01-01 23:30:01\n4          1   No-TV 2020-01-01 23:30:00 2020-01-02 02:59:59"}, {"fullname": "dsc.introduction.data.viewing_duration", "modulename": "dsc.introduction.data", "qualname": "viewing_duration", "kind": "variable", "doc": "<p></p>\n", "default_value": "   member_id  weight  ...                 end viewing_duration\n0          1      50  ... 2020-01-01 16:29:59  0 days 01:30:00\n1          1      50  ... 2020-01-01 16:59:59  0 days 00:30:00\n2          2      25  ... 2020-01-01 15:59:59  0 days 01:00:00\n3          2      25  ... 2020-01-01 16:59:59  0 days 01:00:00\n\n[4 rows x 7 columns]"}, {"fullname": "dsc.introduction.data.potential", "modulename": "dsc.introduction.data", "qualname": "potential", "kind": "variable", "doc": "<p></p>\n", "default_value": "75"}, {"fullname": "dsc.notebook", "modulename": "dsc.notebook", "kind": "module", "doc": "<p>Contains utility functions that are used for all lectures\nlike embeding webpages into a Jupyter notebook.\nIf run as a script, the\n<a href=\"https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/nbextensions\">nb extensions</a>\nare configured according to <code>.jupyter/nbconfig</code>. In particular, since the sidebar of\ntoc2 does not work anymore in recent versions, it is disabled and the floating\ntoc window is used to imitate it.</p>\n"}, {"fullname": "dsc.notebook.markdown", "modulename": "dsc.notebook", "qualname": "markdown", "kind": "variable", "doc": "<p>The default value of <em>markdown</em> for <code>embed_website</code>.</p>\n", "default_value": "False"}, {"fullname": "dsc.notebook.default_folder", "modulename": "dsc.notebook", "qualname": "default_folder", "kind": "variable", "doc": "<p>The default value of <em>folder</em> for <code>git_root</code>.</p>\n", "default_value": "&#x27;.&#x27;"}, {"fullname": "dsc.notebook.embed_website", "modulename": "dsc.notebook", "qualname": "embed_website", "kind": "function", "doc": "<p>Embeds a website into a Jupyter notebook code cell with given <em>width</em> and\n<em>height</em>.</p>\n\n<p>If <em>markdown</em> is True sets the figure height to 0.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">markdown</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">IPython</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">IFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.notebook.git_root", "modulename": "dsc.notebook", "qualname": "git_root", "kind": "function", "doc": "<p>Returns the absolute path of the Git repo root or the Git submodule.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folder:</strong>  The path of a folder of a Git repo. Defaults to <code>default_folder</code>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>dsc.shell.RunCMDError</code>:</strong>  If <code>folder</code> is not within a Git repo.</li>\n</ul>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>Displays the root directory of the submodule and not the parent\n  repo if folder is within a Git submodule.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The absolute path of the Git repo root.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ds.shell</span> <span class=\"kn\">import</span> <span class=\"n\">RunCMDError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ds.inspect</span> <span class=\"kn\">import</span> <span class=\"n\">git_root</span>\n\n<span class=\"n\">git_root</span><span class=\"p\">()</span>  <span class=\"c1\"># e.g., &#39;/home/spa0001f/git_repos/teach/dsc&#39;</span>\n\n<span class=\"c1\"># Not within a Git repo (assuming /home is not a Git repo)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">git_root</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;/home&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RunCMDError</span><span class=\"p\">:</span>\n    <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.notebook.set_wd", "modulename": "dsc.notebook", "qualname": "set_wd", "kind": "function", "doc": "<p>Sets the working directory of the notebook to the root of the Git repo.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project", "modulename": "dsc.setup_python_project", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test", "modulename": "dsc.setup_python_project.pyscaffold_test", "kind": "module", "doc": "<p>Used for lecture_notes/2_setup_python_project/2_python_project.</p>\n\n<p>Overall description...missing ;)</p>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.cml", "modulename": "dsc.setup_python_project.pyscaffold_test.cml", "kind": "module", "doc": "<p>Tools for writing command line interfaces.</p>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.cml.make_docstring_help_description", "modulename": "dsc.setup_python_project.pyscaffold_test.cml", "qualname": "make_docstring_help_description", "kind": "function", "doc": "<p>Turns the docstring of a script into its command line description.</p>\n\n<p>Use this function in a script (the function should NOT be accessible if\nthe script is imported as a module) to make the docstring of the script\nthe description that is displayed when the script is executed with\nthe -h flag, e.g., python3 my_script.py -h.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>__doc__:</strong>  The __doc__ attribute of a .py script.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"vm\">__doc__</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "kind": "module", "doc": "<p>Query, transform, aggregate, store and load data.</p>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data.query_data_from_db", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "qualname": "query_data_from_db", "kind": "function", "doc": "<p>Returns the result of the query 'query' from  the database 'path' as\npd.DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data.transform_data", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "qualname": "transform_data", "kind": "function", "doc": "<p>Transforms df.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column2lower:</strong>  If True, convert all columns of 'df' to lower case.</li>\n<li><strong>freq_col:</strong>  Must be a string that is a valid attribute of pandas.Series.dt,\ne.g, ['month', 'day_of_week', 'hour', 'quarter', ...].\nAdds the resulting pd.Series as column to 'df'.</li>\n<li><strong>filter_row:</strong>  If provided, must be a string that is consistent with\npd.DataFrame.query..</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Transformed dataframe.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">columns2lower</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">freq_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;month&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data.mean_target_per_group", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "qualname": "mean_target_per_group", "kind": "function", "doc": "<p>Aggregates the column 'target' of 'df' by taking the mean over 'group_cols'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">group_cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data.store_data", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "qualname": "store_data", "kind": "function", "doc": "<p>Pickles 'df' as 'path'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.data.load_data", "modulename": "dsc.setup_python_project.pyscaffold_test.data", "qualname": "load_data", "kind": "function", "doc": "<p>Loads columns 'subset' of 'df' from 'path'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "kind": "module", "doc": "<p>Model classes and instance loading and storage.</p>\n\n<ul>\n<li>Provides SimpleLinearRegression that can be fitted to data and predict data.</li>\n<li>Moreover, stores and loads SimpleLinearRegression using pickle.</li>\n</ul>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.SimpleLinearRegression", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "SimpleLinearRegression", "kind": "class", "doc": "<p>Simple linear regression using ordinary least-squares.</p>\n\n<ul>\n<li>Note that a simple linear regression uses only one feature.</li>\n<li>Its methods .fit and .predict use the Scikit-Learn API.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>a:</strong>  Intercept. Updated during .fit().</li>\n<li><strong>b:</strong>  Slope. Updated during .fit().</li>\n</ul>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.SimpleLinearRegression.a", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "SimpleLinearRegression.a", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.SimpleLinearRegression.b", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "SimpleLinearRegression.b", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.SimpleLinearRegression.fit", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "SimpleLinearRegression.fit", "kind": "function", "doc": "<p>Regresses y on X using ordinary least-squares.</p>\n\n<p>Updates the attributes a and b.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y:</strong>  Target values.</li>\n<li><strong>X:</strong>  Feature values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The class instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">setup_python_project</span><span class=\"o\">.</span><span class=\"n\">pyscaffold_test</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SimpleLinearRegression</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.SimpleLinearRegression.predict", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "SimpleLinearRegression.predict", "kind": "function", "doc": "<p>Predicts the target using the fitted model and X.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>X:</strong>  Feature values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Predicted target values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.store_model", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "store_model", "kind": "function", "doc": "<p>Pickles 'model' as 'path'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">setup_python_project</span><span class=\"o\">.</span><span class=\"n\">pyscaffold_test</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SimpleLinearRegression</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.load_model", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "load_model", "kind": "function", "doc": "<p>Loads 'model' from 'path'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">setup_python_project</span><span class=\"o\">.</span><span class=\"n\">pyscaffold_test</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SimpleLinearRegression</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.model.store_prediction", "modulename": "dsc.setup_python_project.pyscaffold_test.model", "qualname": "store_prediction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prediction</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.plot", "modulename": "dsc.setup_python_project.pyscaffold_test.plot", "kind": "module", "doc": "<p>Provides plotting functions.</p>\n"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.plot.plot", "modulename": "dsc.setup_python_project.pyscaffold_test.plot", "qualname": "plot", "kind": "function", "doc": "<p>Plots x vs. y.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;matplotlib.pyplot&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/site-packages/matplotlib/pyplot.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.pyscaffold_test.plot.plot_x_vs_yy", "modulename": "dsc.setup_python_project.pyscaffold_test.plot", "qualname": "plot_x_vs_yy", "kind": "function", "doc": "<p>Plots x vs. y1 and y2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pd.Series[float]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;matplotlib.pyplot&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/site-packages/matplotlib/pyplot.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.sys_path", "modulename": "dsc.setup_python_project.sys_path", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dsc.setup_python_project.sys_path.SysInfo", "modulename": "dsc.setup_python_project.sys_path", "qualname": "SysInfo", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "dsc.setup_python_project.sys_path.SysInfo.__init__", "modulename": "dsc.setup_python_project.sys_path", "qualname": "SysInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">excluded_from_sys_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sys_path_without_excluded</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "dsc.setup_python_project.sys_path.SysInfo.excluded_from_sys_path", "modulename": "dsc.setup_python_project.sys_path", "qualname": "SysInfo.excluded_from_sys_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]", "default_value": "None"}, {"fullname": "dsc.setup_python_project.sys_path.SysInfo.sys_path_without_excluded", "modulename": "dsc.setup_python_project.sys_path", "qualname": "SysInfo.sys_path_without_excluded", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]", "default_value": "None"}, {"fullname": "dsc.setup_python_project.sys_path.sys_info", "modulename": "dsc.setup_python_project.sys_path", "qualname": "sys_info", "kind": "variable", "doc": "<p></p>\n", "default_value": "SysInfo(excluded_from_sys_path=[&#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python310.zip&#x27;, &#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10&#x27;, &#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/lib-dynload&#x27;, &#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/site-packages&#x27;], sys_path_without_excluded=[&#x27;src&#x27;, &#x27;/home/spa0001f/mambaforge_new/envs/dsc_dev/bin&#x27;, &#x27;/home/spa0001f/github/teach/dsc_new/src&#x27;])"}, {"fullname": "dsc.setup_python_project.virtual_environment", "modulename": "dsc.setup_python_project.virtual_environment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dsc.setup_python_project.virtual_environment.get_path_of_conda_env", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "get_path_of_conda_env", "kind": "function", "doc": "<p>Returns the path of the currently activated conda env.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.virtual_environment.get_path", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "get_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dsc.setup_python_project.virtual_environment.conda_env", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "conda_env", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/spa0001f/mambaforge_new/envs/dsc_dev&#x27;"}, {"fullname": "dsc.setup_python_project.virtual_environment.site_packages", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "site_packages", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/site-packages&#x27;"}, {"fullname": "dsc.setup_python_project.virtual_environment.python", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "python", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/spa0001f/mambaforge/envs/dsc_dev/bin/python3.10&#x27;"}, {"fullname": "dsc.setup_python_project.virtual_environment.pandas", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "pandas", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/spa0001f/mambaforge/envs/dsc_dev/lib/python3.10/site-packages/pandas&#x27;"}, {"fullname": "dsc.setup_python_project.virtual_environment.path", "modulename": "dsc.setup_python_project.virtual_environment", "qualname": "path", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;/home/spa0001f/mambaforge_new/envs/dsc_dev/bin&#x27;, &#x27;/home/spa0001f/mambaforge_new/condabin&#x27;, &#x27;/home/spa0001f/.vscode-server/bin/252e5463d60e63238250799aef7375787f68b4ee/bin/remote-cli&#x27;, &#x27;/usr/local/sbin&#x27;, &#x27;/usr/local/bin&#x27;, &#x27;/usr/sbin&#x27;, &#x27;/usr/bin&#x27;, &#x27;/sbin&#x27;, &#x27;/bin&#x27;, &#x27;/usr/games&#x27;, &#x27;/usr/local/games&#x27;, &#x27;/mnt/c/Program Files/Adoptium/OpenJava8JREx64/bin&#x27;, &#x27;/mnt/c/Program Files (x86)/Adoptium/OpenJava8JREx86/bin&#x27;, &#x27;/mnt/c/WINDOWS/system32&#x27;, &#x27;/mnt/c/WINDOWS&#x27;, &#x27;/mnt/c/WINDOWS/System32/Wbem&#x27;, &#x27;/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0&#x27;, &#x27;/mnt/c/Program Files (x86)/OpenText/Viewer/bin&#x27;, &#x27;/mnt/c/Program Files (x86)/IBM/Informix/Client-SDK/bin&#x27;, &#x27;/mnt/c/Program Files (x86)/ibm/gsk7/bin&#x27;, &#x27;/mnt/c/Program Files (x86)/ibm/gsk7/lib&#x27;, &#x27;/mnt/c/Program Files/Git/cmd&#x27;, &#x27;/mnt/c/WINDOWS/System32/OpenSSH&#x27;, &#x27;/mnt/c/Users/spa0001f/AppData/Local/Microsoft/WindowsApps&#x27;, &#x27;/mnt/c/Users/spa0001f/AppData/Local/Programs/Microsoft VS Code/bin&#x27;, &#x27;/mnt/c/Users/spa0001f/AppData/Local/Programs/MiKTeX/miktex/bin/x64&#x27;]"}, {"fullname": "dsc.shell", "modulename": "dsc.shell", "kind": "module", "doc": "<p>Provides the function <code>run_cmd</code> to execute shell commands from Python.</p>\n\n<p>This module is mainly used interally for <code>ds.inspect</code>.</p>\n\n<p>For more sophisticated subprocesses have a look at\n<a href=\"https://github.com/amitt001/delegator.py\">delegator</a>.</p>\n\n<p>See\n<a href=\"http://www.leancrew.com/all-this/2012/04/python-doesnt-play-nicely-with-others/\">here</a>\nwhy Python's subprocess is not very user-friendly.</p>\n"}, {"fullname": "dsc.shell.RunCMDError", "modulename": "dsc.shell", "qualname": "RunCMDError", "kind": "class", "doc": "<p>Raises an exception from <code>subprocess.CalledProcessError</code> to provide\ninformation the error message of the stderr stream.</p>\n\n<p>Requires that the stderr stream is forwarded to <code>subprocess.CalledProcessError</code>.</p>\n\n<h6 id=\"note\">Note:</h6>\n\n<blockquote>\n  <p>This is used in <code>run_cmd</code>.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span> <span class=\"kn\">import</span> <span class=\"nn\">CalledProcessError</span><span class=\"o\">,</span> <span class=\"nn\">STDOUT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ds.shell</span> <span class=\"kn\">import</span> <span class=\"n\">RunCMDError</span>\n\n<span class=\"c1\"># The error message of the stderr stream is not included in `CalledProcessError`</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Set stderr=STDOUT to forward the stderr stream to `CalledProcessError`</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;ls&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;nonexistent_file&quot;</span><span class=\"p\">],</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">STDOUT</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">CalledProcessError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exception =&quot;</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error message from stderr:&quot;</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">returncode</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Output:&quot;</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># The error message of the stderr stream is included in RunCMDError</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Set stderr=STDOUT to forward the stderr stream to `CalledProcessError`</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">&quot;ls&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;nonexistent_file&quot;</span><span class=\"p\">],</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">STDOUT</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">CalledProcessError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">RunCMDError</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "builtins.Exception"}, {"fullname": "dsc.shell.RunCMDError.__init__", "modulename": "dsc.shell", "qualname": "RunCMDError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">CalledProcessError</span></span>)</span>"}, {"fullname": "dsc.shell.run_cmd", "modulename": "dsc.shell", "qualname": "run_cmd", "kind": "function", "doc": "<p>Returns the stdout of the shell command <code>cmd</code> executed in the directory\n<code>cwd</code>.</p>\n\n<p>Moreover, it captures the stderr stream of a possible\n<code>subprocess.CalledProcessError</code> by rasing <code>RunCMDError</code>.</p>\n\n<h6 id=\"limitations\">Limitations:</h6>\n\n<blockquote>\n  <p><code>run_cmd(\"git checkout branch -- file\")</code> raises the error that\n  'file' did not match any file(s) known to git. Setting <code>shell</code> to True\n  makes no difference and <code>os.system</code> throws the same error.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cmd:</strong>  Shell command that should be run.</li>\n<li><strong>cwd:</strong>  Working directory of the shell. By default, the current working\ndirectory of the Python interpreter is used.</li>\n<li><strong>print_stderr:</strong>  If False, the stderr stream is not printed to the console\nand the captured error message of the stderr stream is forwarded to\n<code>RunCMDError</code> if a <code>subprocess.CalledProcessError</code> occurs.\nIf True, the stderr stream is printed to the console and\nnot captured by <code>RunCMDError</code>.</li>\n<li><strong>shell:</strong>  If True, the shell is invoked explicitly, see the\n<a href=\"https://docs.python.org/3/library/subprocess.html#frequently-used-arguments\">subprocess docs</a>.\nIf False, the shell is not used to run the shell command. Note that\nvariable interpolation is a shell feature. See\n<a href=\"https://stackoverflow.com/a/5659249\">here</a>.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>RunCMDError</code>:</strong>  Caused by a <code>subprocess.CalledProcessError</code> with the\nerror message being the caputed error message of the stderr stream\nif <code>print_stderr</code> is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: The stdout of the shell command splitted into a list w.r.t. the\n      delimiter \"\\n\".</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ds.shell</span> <span class=\"kn\">import</span> <span class=\"n\">run_cmd</span><span class=\"p\">,</span> <span class=\"n\">RunCMDError</span>\n\n<span class=\"c1\"># -- Display the files and folders of the current working directory</span>\n<span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;ls&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Display the files and folders of the parent working directory</span>\n<span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;ls&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;..&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Invoke the shell or not</span>\n<span class=\"c1\"># Note that variable interpolation is a shell feature.</span>\n<span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;echo $PATH&quot;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Without shell=True, the string that is echoed is simply literally $PATH</span>\n<span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;echo $PATH&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Capturing the error message of the stderr stream</span>\n<span class=\"c1\"># The error message of the stderr stream is included in RunCMDErrorr</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;ls _nonexistent_folder&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RunCMDError</span><span class=\"p\">:</span>\n     <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Here the error message of the stderr stream is printed to the console</span>\n<span class=\"c1\"># before the exception traceback is printed</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"s2\">&quot;ls _nonexistent_folder&quot;</span><span class=\"p\">,</span> <span class=\"n\">print_stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RunCMDError</span><span class=\"p\">:</span>\n    <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cmd</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cwd</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">print_stderr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">shell</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.shell.TemporaryScript", "modulename": "dsc.shell", "qualname": "TemporaryScript", "kind": "class", "doc": "<p>Creates a <code>tempfile.NamedTemporaryFile</code> with <code>code</code> that can be <code>run</code> with\nPython.</p>\n\n<p>Useful for testing the behavior of functions if they are called when a Python\nscript is executed. The name of the temporay file starts with\n'ds_temporary_script_' and ends with '.py'.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">ds.shell</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryScript</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;print(&quot;Hello World!&quot;)&#39;</span>\n<span class=\"k\">with</span> <span class=\"n\">TemporaryScript</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ts</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The path of the temporay file is&quot;</span><span class=\"p\">,</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;The stdout of running &#39;python3 </span><span class=\"si\">{</span><span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&#39; is&quot;</span><span class=\"p\">,</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">{</span><span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&#39;&quot;</span>\n    <span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "dsc.shell.TemporaryScript.__init__", "modulename": "dsc.shell", "qualname": "TemporaryScript.__init__", "kind": "function", "doc": "<p>Assigns a writable instance of <code>tempfile.NamedTemporaryFile</code> to the\nattribute <code>file</code> an inserts <code>code</code> into it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tmp_ds_script&#39;</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.py&#39;</span></span>)</span>"}, {"fullname": "dsc.shell.TemporaryScript.code", "modulename": "dsc.shell", "qualname": "TemporaryScript.code", "kind": "variable", "doc": "<p>Python code.</p>\n"}, {"fullname": "dsc.shell.TemporaryScript.file", "modulename": "dsc.shell", "qualname": "TemporaryScript.file", "kind": "variable", "doc": "<p>A writable instance of <code>tempfile.NamedTemporaryFile</code> with prefix =\n\"ds_temporary_script_\" and suffix = \".py\" into which <code>code</code> is\nwritten.</p>\n"}, {"fullname": "dsc.shell.TemporaryScript.run", "modulename": "dsc.shell", "qualname": "TemporaryScript.run", "kind": "function", "doc": "<p>Execute the <code>code</code> in <code>file</code> with Python in the working directory = <code>cwd</code>\nand command line arguments <code>args</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cwd</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.shell.list_files", "modulename": "dsc.shell", "qualname": "list_files", "kind": "function", "doc": "<p>Folder in exclude must start with \"./\"</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_folder_pattern</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_file_pattern</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_files_unknown_to_git</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.shell.checkout_branch_on_the_basis_of_the_initial_commit", "modulename": "dsc.shell", "qualname": "checkout_branch_on_the_basis_of_the_initial_commit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_branch</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control", "modulename": "dsc.version_control", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dsc.version_control.exercise_dvc", "modulename": "dsc.version_control.exercise_dvc", "kind": "module", "doc": "<p>Helper script for the DVC exercise in\n<code>lecture_notes/2_version_control/3_exercise.ipynb</code>.</p>\n\n<p>Creates the file <code>movies_2018.csv</code> which contains\nall distinct movies titles from 2018-01-01 until\nYYYY-12-31, where YYYY a four-digit number and the first argument that\nis provided to this program when it is run.</p>\n\n<p>Program should be run from the root directory of\nthe project using <code>python3 -m dsc.version_control.exercise_dvc YYYY</code></p>\n"}, {"fullname": "dsc.version_control.exercise_git", "modulename": "dsc.version_control.exercise_git", "kind": "module", "doc": "<p>Helper script for the Git exercises in\n<code>lecture_notes/2_version_control/3_exercise.ipynb</code>.</p>\n\n<p>Program should be run from the root directory of the project using\n<code>python3 -m dsc.version_control.exercise_git [arg]</code>,\nwhere arg is in ['first', 'second', 'third', 'reset'].</p>\n"}, {"fullname": "dsc.version_control.git", "modulename": "dsc.version_control.git", "kind": "module", "doc": "<p>Provides a very basic Git API that is used in <code>lecture_notes/2_version_control</code>.\nThe main program can be used to reproduce the corresponding commits in\n<code>lecture_notes/2_version_control/1_git.ipynb</code></p>\n\n<p>Usage:</p>\n\n<ul>\n<li><code>python3 -m dsc.version_control.git</code> reproduces the commits in section 2.4\nbefore the _target branch is merged into _messy_branch for the first time</li>\n<li><code>python3 -m dsc.version_control.git reset</code> undos all commits done by this program</li>\n<li><code>python3 -m dsc.version_control.git cmd1 cmd2</code>, where cmd1 and cmd2 are\ngit commands that integrate one branch into another, i.e., merge or rebase\n<ul>\n<li><code>python3 -m dsc.version_control.git merge merge</code>  reproduces the commits in\nsection 2.4</li>\n<li><code>python3 -m dsc.version_control.git rebase merge</code>  uses rebase for the first\nintegration</li>\n<li><code>python3 -m dsc.version_control.git rebase \"merge --no-ff\"</code>  uses rebase\nfor the first integration and then an explicit 3-way merge</li>\n<li><code>python3 -m dsc.version_control.git \"rebase -i\" \"merge\"</code></li>\n<li><code>python3 -m dsc.version_control.git \"rebase -i\" \"merge --no-ff\"</code></li>\n</ul></li>\n</ul>\n\n<p>Note for students:\nThe Git class and the main program just get the job done and\ncan be improved...but <a href=\"https://youtu.be/zGxwbhkDjZM?t=25\">https://youtu.be/zGxwbhkDjZM?t=25</a>.</p>\n"}, {"fullname": "dsc.version_control.git.newline", "modulename": "dsc.version_control.git", "qualname": "newline", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n&#x27;"}, {"fullname": "dsc.version_control.git.Git", "modulename": "dsc.version_control.git", "qualname": "Git", "kind": "class", "doc": "<p>Provides a simple Python API for Git that is used in\nlecture_notes/1_version_control.</p>\n\n<p>Note: The documentation of attributes and methods is not done yet.</p>\n"}, {"fullname": "dsc.version_control.git.Git.branch", "modulename": "dsc.version_control.git", "qualname": "Git.branch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dsc.version_control.git.Git.branches", "modulename": "dsc.version_control.git", "qualname": "Git.branches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dsc.version_control.git.Git.commands", "modulename": "dsc.version_control.git", "qualname": "Git.commands", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dsc.version_control.git.Git.commit_messages", "modulename": "dsc.version_control.git", "qualname": "Git.commit_messages", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dsc.version_control.git.Git.commit", "modulename": "dsc.version_control.git", "qualname": "Git.commit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path2file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">append</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control.git.Git.checkout", "modulename": "dsc.version_control.git", "qualname": "Git.checkout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">branch</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control.git.Git.integrate", "modulename": "dsc.version_control.git", "qualname": "Git.integrate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control.git.Git.delete", "modulename": "dsc.version_control.git", "qualname": "Git.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">branch</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control.git.Git.reset", "modulename": "dsc.version_control.git", "qualname": "Git.reset", "kind": "function", "doc": "<p>Checkout to main and delete <code>branches</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}, {"fullname": "dsc.version_control.git.Git.execute", "modulename": "dsc.version_control.git", "qualname": "Git.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dry_run</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dsc</span><span class=\"o\">.</span><span class=\"n\">version_control</span><span class=\"o\">.</span><span class=\"n\">git</span><span class=\"o\">.</span><span class=\"n\">Git</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();